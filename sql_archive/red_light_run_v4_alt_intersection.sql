create table cve_scratch_42 as 
with map_subset as (SELECT * FROM cve_one_day where os_partition = '2021_01' and sourcedevice = 'morse_morsecrossing_cvcp' and messagetype = 'MAP' and timestamp > '2021-01-05T07:00:00.000Z' and timestamp < '2021-01-05T07:05:00.000Z' limit 1),
extracted_values as (
    select json_extract(messageBody, '$.intersections[0].laneSet[0].nodeList[1][1]') as cursor, 
           json_extract(messageBody, '$.intersections[0].laneWidth') as laneWidth, 
           cast(json_extract_scalar(messageBody, '$.intersections[0].refPoint.lat') as double) / 10000000 as refLat, 
           cast(json_extract_scalar(messageBody, '$.intersections[0].refPoint.long') as double) / 10000000 as refLon, 

           transform(
               cast(json_extract(messageBody, '$.intersections[0].laneSet') AS ARRAY<JSON>),
                 x -> element_at(transform(cast(JSON_EXTRACT(x, '$.nodeList[1]') as ARRAY<JSON>),
                   y -> cast(ROW(
                     JSON_EXTRACT_scalar(x, '$.laneID'), 
                     JSON_EXTRACT_scalar(x, '$.ingressApproach'),
                     cast(transform(cast(JSON_EXTRACT(x, '$.connectsTo') as ARRAY<JSON>), connection -> JSON_EXTRACT_SCALAR(connection, '$.signalGroup')) as ARRAY<VARCHAR>),  
                     JSON_EXTRACT_scalar(y, '$.delta[1].x'), 
                     JSON_EXTRACT_scalar(y, '$.delta[1].y'),
                     JSON_EXTRACT_scalar(x, '$.nodeList[1][1].delta[1].x'), 
                     JSON_EXTRACT_scalar(x, '$.nodeList[1][1].delta[1].y')
                     ) 
                  as ROW(laneID VARCHAR, ingressApproach VARCHAR, signals ARRAY<VARCHAR>, x DOUBLE, y DOUBLE, xOffset DOUBLE, yOffset DOUBLE))
                 ), 1)
            ) as deltas,
    * from map_subset),
extracted_coordinates as (select transform(deltas, x -> cast(ROW(
  x.laneID, 
  x.ingressApproach, 
  x.signals,
  refLat + (x.y / 100) / 111111, 
  refLon + (x.x / 100) / (111111 * COS(refLat * PI() / 180)),
  MOD(90 - ATAN2(x.yOffset * -1, x.xOffset * -1)*180/PI(),360)
  ) as ROW(laneID VARCHAR, ingressApproach VARCHAR, signals ARRAY<VARCHAR>, lat DOUBLE, lon DOUBLE, laneDirection DOUBLE))) as coordinates, * from extracted_values),

stop_points as (SELECT ingressApproach, laneID, signals, lat, lon, CASE WHEN laneDirection < 0 THEN laneDirection + 360 else laneDirection END as laneDirection, cursor FROM extracted_coordinates CROSS JOIN UNNEST(coordinates) AS t ( laneID, ingressApproach, signals, lat, lon, laneDirection) where ingressApproach is not null),

lane_signal_groups as (select laneID, lat, lon, signalGroup, laneDirection from stop_points CROSS JOIN UNNEST(signals) as t (signalGroup)),



spat_subset as (SELECT * FROM cve_one_day where os_partition = '2021_01' and sourcedevice = 'morse_morsecrossing_cvcp' and messagetype = 'SPAT' and day(from_iso8601_timestamp(timestamp)) = 5),

signal_states as (select sourcedevice, timestamp, transform(cast(json_extract(messagebody, '$.intersections[0].states') as ARRAY<JSON>), x -> cast(ROW(json_extract(x, '$.signalGroup'), json_extract(x, '$["state-time-speed"][0].eventState')) as ROW(signalGroup VARCHAR, state VARCHAR))) as signalStates from spat_subset),

extracted_signal_states as (select sourceDevice, timestamp, signalGroup, state from signal_states CROSS JOIN UNNEST(signalStates) AS t ( signalGroup, state)),

spat_states as (select state, timestamp, laneID, laneDirection from lane_signal_groups join extracted_signal_states using (signalGroup)),

spat_truthy_states as (select state = 'stop-And-Remain' as signal_group_red, timestamp, laneID, laneDirection from spat_states),

spat_lane_states as (select every(signal_group_red) as lane_red_light, laneID, laneDirection, timestamp from spat_truthy_states group by laneID, timestamp, laneDirection),


bsm_subset as (select * from cve_one_day where os_partition = '2021_01' and messagetype = 'BSM' and sourcedevice = 'morse_morsecrossing_cvcp' and day(from_iso8601_timestamp(timestamp)) = 5), 

identified_locations as (select cast(json_extract_scalar(messagebody, '$.coreData.lat') as double) / 10000000 as lat, cast(json_extract_scalar(messagebody, '$.coreData.long') as double) / 10000000 as long, json_extract_scalar(messagebody, '$.coreData.id') as id, timestamp, cast(json_extract_scalar(messagebody, '$.coreData.speed') as double) as speed, cast(json_extract(messagebody,'$.coreData.heading') as double) / 80 as heading from bsm_subset),

bsms_in_range as (select il.lat, il.long, il.id, il.timestamp, il.speed, il.heading from identified_locations il join stop_points sp on ST_Distance(ST_Point(il.lat, il.long), ST_Point(sp.lat, sp.lon)) < 0.00004),

distance_to_lane as (select bsm.id, bsm.lat, bsm.long, laneID, timestamp, speed, sp.laneDirection, heading, ST_Distance(ST_Point(bsm.lat, bsm.long), ST_Point(sp.lat, sp.lon)) as distance from bsms_in_range bsm join stop_points sp on 1=1),

bsms as (select id, min(distance) as distance, laneID, lat, long, timestamp, speed, laneDirection, heading from distance_to_lane 
where speed > 1.0 
and (
  (abs(heading - lanedirection) < 20) 
  OR (heading > 360 - 20 AND heading > laneDirection + 360 - 20)
  OR (heading < 20 AND heading < laneDirection - 360 + 20)
) 
and distance < 0.00004 group by id, laneID, lat, long, timestamp, speed, laneDirection, heading),


bsms_unix as (select timestamp, to_unixtime(from_iso8601_timestamp(timestamp)) as unixtime, laneID from bsms),
spats_unix as (select timestamp, to_unixtime(from_iso8601_timestamp(timestamp)) as unixtime, laneID from spat_lane_states),

unix_join as (select bsms.timestamp as bsm_timestamp, spats.timestamp as spat_timestamp, spats.laneID from bsms_unix as bsms join spats_unix as spats on abs(bsms.unixtime - spats.unixtime) < 0.05 and bsms.laneID = spats.laneID),

deduped_unix_join as (select min(spat_timestamp) as spat_timestamp, bsm_timestamp, laneID from unix_join group by bsm_timestamp, laneID)

select bsms.id, bsms.lat, bsms.long, bsms.timestamp as bsm_timestamp, spat_lane_states.timestamp as spat_timestamp, lane_red_light, dd.laneID, sp.signals, bsms.laneDirection, bsms.heading, 'morse_morsecrossing_cvcp' as sourcedevice 
from bsms 
  join deduped_unix_join dd on bsms.timestamp = dd.bsm_timestamp and bsms.laneID = dd.laneID
  join spat_lane_states on spat_lane_states.timestamp = dd.spat_timestamp and spat_lane_states.laneID = dd.laneID
  join stop_points sp on sp.laneID = dd.laneID;