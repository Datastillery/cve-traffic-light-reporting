import report_utilities as utils

from datetime import date

SOURCE_TABLE = 'smart_columbus_cve__captcha'

def run_clean(cur, partition, target_table):
    clean_query = f"""
        with 
        bsms as (
            SELECT *, cast(json_extract(messageBody,'$.coreData.id') as bigint) as vehId, ST_Point(cast(json_extract(messageBody,'$.coreData.long') as double ) /10000000,
                   cast(json_extract(messageBody,'$.coreData.lat') as double ) /10000000) as bsmPointGeometryObjects, to_iso8601(date_add('second', 30 - (cast(json_extract(messageBody,'$.coreData.id') as bigint) % 60),from_iso8601_timestamp(timestamp))) as timestamp_adj
            FROM smart_columbus_cve__captcha 
            where messagetype = 'BSM' and os_partition = '{partition}'
        ),

        hotspots as (
            SELECT * from (VALUES (-83.0029695384059, 40.0222339956992), (-82.9643530290269, 40.0103473379655), (-82.9589984973273, 40.0148932705141), (-82.9622560856926, 40.014541309405), (-82.9537806016758, 40.0235228452306), (-82.9287554961696, 40.0698630339997), (-82.9285026524013, 40.0691967868028), (-82.9492586470793, 40.0646991663062), (-82.9489503105539, 40.0638131331412), (-83.0019735685118, 40.0351778462545), (-83.0091627266306, 40.0418418372363), (-83.0103231941982, 40.0551387564812), (-82.9790599699706, 40.054993858354), (-82.9787415449681, 40.0808335181171)) as t (lon, lat)
        ),

        hotspot_point_geometries as (
            SELECT ST_Point(cast(lon as double), cast(lat as double)) as hotspotPointGeometry from hotspots
        ),

        hotspot_multipoint_buffer_geometries as (
            SELECT ST_Buffer(ST_MultiPoint(array_agg(hotspotPointGeometry)),0.001) as hotspotCombinedGeometry from hotspot_point_geometries
        )

        SELECT 
            bsms.timestamp_adj as timestamp, 
            bsms.messagebody as messagebody, 
            bsms.messagetype as messagetype, 
            bsms.os_partition as os_partition, 
            bsms.sourcedevice as sourcedevice 
        from bsms bsms, hotspot_multipoint_buffer_geometries hbg where NOT ST_Contains(hbg.hotspotCombinedGeometry, bsms.bsmPointGeometryObjects) 
        UNION ALL 
        SELECT 
            timestamp as timestamp, 
            messagebody as messagebody, 
            messagetype as messagetype, 
            os_partition as os_partition, 
            sourcedevice as sourcedevice 
        from smart_columbus_cve__captcha 
        where (messagetype = 'MAP' or messagetype = 'SPAT' or messagetype = 'SRM' or messagetype = 'SSM' or messagetype = 'TIM') 
        and os_partition = '{partition}'
    """

    utils.run_and_save_query(cur, clean_query, target_table)

cur = utils.new_connection()

for partition in ["2020_10", "2020_11", "2020_12", "2021_01", "2021_02", "2021_03"]:
    run_clean(cur, partition, f"cve_clean_{partition}")