import report_utilities as utils

from datetime import date

SOURCE_TABLE = 'smart_columbus_cve__captcha'

def run_time_report(cur, partition, target_table):
    time_query = f"""
        with bsm_subset as (
                select * from smart_columbus_cve__captcha 
                where messagetype = 'BSM'
                and os_partition = '{partition}'
            ), 

            identified_locations as (
                select 
                    json_extract_scalar(messagebody, '$.coreData.id') as id, 
                    cast(json_extract_scalar(messagebody, '$.coreData.lat') as double) / 10000000 as lat, 
                    cast(json_extract_scalar(messagebody, '$.coreData.long') as double) / 10000000 as long,
                    sourcedevice,
                    timestamp
                    from bsm_subset
            ),
            
            lane_subset as (select * from smart_columbus_cve__cve_lane_geometries 
                where lanetype = 'vehicle'
            ),

            identified_laned_bsms as (SELECT geo.sourcedevice, il.timestamp, geo.laneid, il.id FROM identified_locations il
            join lane_subset geo
                on geo.sourcedevice = il.sourcedevice 
                and ST_Contains(ST_GeometryFromText(geo.geometry), ST_Point(il.long, il.lat))),
            
            time_boundaries as (select max(timestamp) as endtime, min(timestamp) as starttime, id, sourcedevice from identified_laned_bsms group by id, sourcedevice)
            
        select date_diff('second', from_iso8601_timestamp(starttime), from_iso8601_timestamp(endtime)) as time_in_intersection, date_format(from_iso8601_timestamp(starttime), '%Y_%m_%d') as day, id, sourcedevice from time_boundaries
    """

    utils.run_and_save_query(cur, time_query, target_table)

cur = utils.new_connection()

for partition in ["2021_03"]:
    run_time_report(cur, partition, f"cve_intersection_time_{partition}")