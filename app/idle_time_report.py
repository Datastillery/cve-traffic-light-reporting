import report_utilities as utils

from datetime import date

SOURCE_TABLE = 'smart_columbus_cve__captcha'

def run_idle_time_report(cur, partition, target_table):
    idle_threshold = 11.17
    slow_threshold = 335.27
    idle_query = f"""
        with 
            bsm_speeds as (
                select 
                    cast(json_extract_scalar(messagebody, '$.coreData.speed') as double) as speed, 
                    cast(json_extract_scalar(messagebody, '$.coreData.lat') as double) / 10000000 as lat, 
                    cast(json_extract_scalar(messagebody, '$.coreData.long') as double) / 10000000 as long,
                    sourcedevice, 
                    date_format(from_iso8601_timestamp(timestamp), '%Y_%m_%d') as day

                from {SOURCE_TABLE} where os_partition = '{partition}' and messagetype = 'BSM'
            ),

            lane_subset as (
                select * from smart_columbus_cve__cve_lane_geometries 
                where lanetype = 'vehicle'
            ),

            identified_laned_bsms as (
                SELECT geo.sourcedevice, geo.laneid, il.day, il.speed FROM bsm_speeds il
                join lane_subset geo 
                    on geo.sourcedevice = il.sourcedevice 
                    and ST_Contains(ST_GeometryFromText(geo.geometry), ST_Point(il.long, il.lat))
            ),

            idle_records as (select count(1) as idle, sourcedevice, day, laneid from identified_laned_bsms where speed <= {idle_threshold} group by sourcedevice, day, laneid),

            slow_records as (select count(1) as slow, sourcedevice, day, laneid from identified_laned_bsms where speed <= {slow_threshold} group by sourcedevice, day, laneid),

            total_records as (select count(1) as total, sourcedevice, day, laneid from identified_laned_bsms group by sourcedevice, day, laneid)

        select * from total_records join slow_records using (sourcedevice, day, laneid) join idle_records using (sourcedevice, day, laneid)
    """
    utils.run_and_save_query(cur, idle_query, target_table)

cur = utils.new_connection()

for partition in utils.partitions_in_range(date(2020, 10, 16), date.today()):
    run_idle_time_report(cur, partition, f"cve_idle_time_{partition}")