import prestodb
from datetime import datetime, date, timedelta
from retry import retry
import logging

logging.basicConfig(filename='cve.log',
                            filemode='a',
                            format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',
                            datefmt='%H:%M:%S',
                            level=logging.INFO)
def log(log):
    logging.info(log)

def new_connection():
    conn=prestodb.dbapi.connect(
        host='kdp-kubernetes-data-platform-presto.kdp',
        port=8080,
        user='python',
        catalog='hive',
        schema='default',
    )
    return conn.cursor()

@retry(tries=5)
def run_and_save_query(cur, query, save_table):
    logging.info(f'Starting {save_table}')
    start = datetime.now()
    cur.execute(f'drop table if exists {save_table}')
    cur.fetchall()

    cur.execute(f'create table {save_table} as {query}')
    cur.fetchall()
    logging.info(f'Phase time for {save_table}: {datetime.now()-start}')


def daterange(start_date, end_date):
    for n in range(int((end_date - start_date).days)):
        yield start_date + timedelta(n)

def partitions_in_range(start_date, end_date):
    partitions = []
    for day in daterange(start_date, end_date):
        partitions.append(day.strftime("%Y_%m"))
    partitions = list(set(partitions))
    partitions.sort()
    return partitions


def weekly_partitions_in_range(start_date, end_date):
    partitions = []
    for day in daterange(start_date, end_date):
        partitions.append(
            f"""{day.strftime("%Y_%m")},{day.isocalendar()[1]}"""
        )
    partitions = list(set(partitions))
    partitions.sort()
    return partitions