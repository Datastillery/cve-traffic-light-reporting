with map_subset as (SELECT * FROM smart_columbus_cve__captcha where os_partition = '2020_12' and sourcedevice = 'morse_morsecrossing_cvcp' and messagetype = 'MAP' and timestamp > '2020-12-09T07:00:00.000Z' and timestamp < '2020-12-09T07:05:00.000Z' limit 1),
extracted_values as (
    select json_extract(messageBody, '$.intersections[0].laneSet[0]') as cursor, 
           json_extract(messageBody, '$.intersections[0].laneWidth') as laneWidth, 
           cast(json_extract_scalar(messageBody, '$.intersections[0].refPoint.lat') as double) as refLat, 
           cast(json_extract_scalar(messageBody, '$.intersections[0].refPoint.long') as double) as refLon, 

           transform(
               cast(json_extract(messageBody, '$.intersections[0].laneSet') AS ARRAY<JSON>),
                 x -> element_at(transform(cast(JSON_EXTRACT(x, '$.nodeList[1]') as ARRAY<JSON>),
                   y -> cast(ROW(
                                 JSON_EXTRACT_scalar(x, '$.laneID'), 
                                 JSON_EXTRACT_scalar(x, '$.ingressApproach'),
                                 cast(transform(cast(JSON_EXTRACT(x, '$.connectsTo') as ARRAY<JSON>), connection -> JSON_EXTRACT_SCALAR(connection, '$.signalGroup')) as ARRAY<VARCHAR>), 
                                 JSON_EXTRACT_scalar(y, '$.delta[1].x'), 
                                 JSON_EXTRACT_scalar(y, '$.delta[1].y')
                                ) 
                        as ROW(laneID VARCHAR, ingressApproach VARCHAR, signals ARRAY<VARCHAR>, x DOUBLE, y DOUBLE))
                 ), 1)
            ) as deltas,
    * from map_subset),
    
extracted_coordinates as (select transform(deltas, x -> cast(ROW(x.laneID, x.ingressApproach, x.signals, refLat + x.y, refLon + x.x) as ROW(laneID VARCHAR, ingressApproach VARCHAR, signals ARRAY<VARCHAR>, lat DOUBLE, lon DOUBLE))) as coordinates, * from extracted_values),

stop_points as (SELECT ingressApproach, laneID, signals, lat / 10000000 as lat, lon / 10000000 as lon, cursor FROM extracted_coordinates CROSS JOIN UNNEST(coordinates) AS t ( laneID, ingressApproach, signals, lat, lon) where ingressApproach is not null),

lane_signal_groups as (select laneID, lat, lon, signalGroup from stop_points CROSS JOIN UNNEST(signals) as t (signalGroup)),


spat_subset as (SELECT * FROM smart_columbus_cve__data_subset_smart_columbus_connected_vehicle_environment_project_20201213 where os_partition = '2020_12' and sourcedevice = 'morse_morsecrossing_cvcp' and messagetype = 'SPAT' and timestamp > '2020-12-13T10:00:00.000Z' and timestamp < '2020-12-13T14:00:00.000Z'),

signal_states as (select sourcedevice, timestamp, transform(cast(json_extract(messagebody, '$.intersections[0].states') as ARRAY<JSON>), x -> cast(ROW(json_extract(x, '$.signalGroup'), json_extract(x, '$["state-time-speed"][0].eventState')) as ROW(signalGroup VARCHAR, state VARCHAR))) as signalStates from spat_subset),

extracted_signal_states as (select sourceDevice, timestamp, signalGroup, state from signal_states CROSS JOIN UNNEST(signalStates) AS t ( signalGroup, state)),

spat_states as (select state, timestamp from lane_signal_groups join extracted_signal_states using (signalGroup)),


bsms as (SELECT * FROM smart_columbus_cve__data_subset_smart_columbus_connected_vehicle_environment_project_20201213 where messagetype = 'BSM'),

bsms_unix as (select timestamp, to_unixtime(from_iso8601_timestamp(timestamp)) as unixtime from bsms),

-- spats as (select distinct(messagebody), timestamp from smart_columbus_cve__data_subset_smart_columbus_connected_vehicle_environment_project_20201213 where messagetype = 'SPAT'),

spats_unix as (select timestamp, to_unixtime(from_iso8601_timestamp(timestamp)) as unixtime from spat_states),

unix_join as (select bsms.timestamp as bsm_timestamp, spats.timestamp as spat_timestamp from bsms_unix as bsms join spats_unix as spats on abs(bsms.unixtime - spats.unixtime) < 0.01),

deduped_unix_join as (select min(spat_timestamp) as spat_timestamp, bsm_timestamp from unix_join group by bsm_timestamp)

select * from bsms join deduped_unix_join dd on bsms.timestamp = dd.bsm_timestamp
                   join spat_states on spat_states.timestamp = dd.spat_timestamp limit 10;